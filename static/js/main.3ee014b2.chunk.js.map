{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","Robots.js","ErrorBoundry.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","Robots","map","user","i","key","SearchBox","searchfield","SearchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","username","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","filteredRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"oOAceA,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GACzB,OACI,yBAAKC,UAAY,uDACb,yBAAKC,IAAI,SAASC,IAAG,gCAA2BH,EAA3B,mBACrB,6BACI,4BAAKF,GACL,2BAAIC,MCcLK,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACAC,IAAOD,EACPR,GAAMK,EAAOG,GAAGR,GAChBF,KAAQO,EAAOG,GAAGV,KAClBC,MAASM,EAAOG,GAAGT,aCG5BW,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKX,UAAY,OACb,2BACIA,UAAY,mCACZY,KAAO,SACPC,YAAc,gBACdC,SAAYH,MCAbI,EARA,SAACC,GACZ,OACI,yBAAKC,MAAS,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjEJ,EAAMK,WCLNjB,EAAS,CAClB,CACEL,GAAI,EACJF,KAAM,gBACNyB,SAAU,OACVxB,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACNyB,SAAU,YACVxB,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACNyB,SAAU,WACVxB,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACNyB,SAAU,WACVxB,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNyB,SAAU,SACVxB,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACNyB,SAAU,mBACVxB,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACNyB,SAAU,eACVxB,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNyB,SAAU,gBACVxB,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNyB,SAAU,WACVxB,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNyB,SAAU,iBACVxB,MAAO,2BCnCEyB,G,wDAnBX,WAAYP,GAAQ,IAAD,8BACf,cAAOA,IACFQ,MAAQ,CACTC,UAAU,GAHC,E,8DAODC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACJ,0DAEJG,KAAKZ,MAAMK,a,GAhBCS,cC6CZC,E,kDAtCX,aAAgB,IAAD,8BACX,gBAaJC,eAAiB,SAACC,GACV,EAAKJ,SAAS,CAACnB,YAAauB,EAAMC,OAAOC,SAb7C,EAAKX,MAAQ,CACTpB,OAAQA,EACRM,YAAa,IAJN,E,qDAmBJ,IAAD,OACA0B,EAAiBR,KAAKJ,MAAMpB,OAAOiC,QAAO,SAAAjC,GAChD,OAAOA,EAAOP,KAAKyC,cAAcC,SAAS,EAAKf,MAAMd,YAAY4B,kBAEjE,OACI,yBAAKtC,UAAY,MACb,wBAAIA,UAAY,MAAhB,eACA,kBAAC,EAAD,CAAWW,aAAgBiB,KAAKI,iBAChC,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU5B,OAAUgC,W,GA9B1BN,a,MCEEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD4H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7B,GACL8B,QAAQ9B,MAAMA,EAAM+B,a","file":"static/js/main.3ee014b2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id} ) => {\n    return (\n        <div className = 'tc bg-light-green dib br3 pd3 ma2 grow bw2 shadow-5'>\n            <img alt=\"robots\" src={` https://robohash.org/${id}?size=200x200` }  />\n            <div> \n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ Robots }) => {\n    return (\n        <div>\n            {\n                Robots.map((user, i) => {\n                    return (\n                        <Card \n                        key = {i} \n                        id = {Robots[i].id} \n                        name = {Robots[i].name} \n                        email = {Robots[i].email}\n                        />\n                    );\n                })\n            }\n        </div>\n     );\n}\n\nexport default CardList;\n","import React from 'react';\n\n\nconst SearchBox = ({searchfield, SearchChange}) => {\n    return (\n        <div className = 'pa2'>\n            <input \n                className = 'pa3 ba b--green bg-lightest-blue'\n                type = 'search' \n                placeholder = 'Search Robots'\n                onChange = {SearchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style = {{overflow: 'scroll', border: '1px solid black', height: '500px'}}>\n            {props.children}\n        </div>        \n    );\n};\n\nexport default Scroll;\n","export const Robots = [\n    {\n      id: 1,\n      name: 'Leanne Graham',\n      username: 'Bret',\n      email: 'Sincere@april.biz'\n    },\n    {\n      id: 2,\n      name: 'Ervin Howell',\n      username: 'Antonette',\n      email: 'Shanna@melissa.tv'\n    },\n    {\n      id: 3,\n      name: 'Clementine Bauch',\n      username: 'Samantha',\n      email: 'Nathan@yesenia.net'\n    },\n    {\n      id: 4,\n      name: 'Patricia Lebsack',\n      username: 'Karianne',\n      email: 'Julianne.OConner@kory.org'\n    },\n    {\n      id: 5,\n      name: 'Chelsey Dietrich',\n      username: 'Kamren',\n      email: 'Lucio_Hettinger@annie.ca'\n    },\n    {\n      id: 6,\n      name: 'Mrs. Dennis Schulist',\n      username: 'Leopoldo_Corkery',\n      email: 'Karley_Dach@jasper.info'\n    },\n    {\n      id: 7,\n      name: 'Kurtis Weissnat',\n      username: 'Elwyn.Skiles',\n      email: 'Telly.Hoeger@billy.biz'\n    },\n    {\n      id: 8,\n      name: 'Nicholas Runolfsdottir V',\n      username: 'Maxime_Nienow',\n      email: 'Sherwood@rosamond.me'\n    },\n    {\n      id: 9,\n      name: 'Glenna Reichert',\n      username: 'Delphine',\n      email: 'Chaim_McDermott@dana.io'\n    },\n    {\n      id: 10,\n      name: 'Clementina DuBuque',\n      username: 'Moriah.Stanton',\n      email: 'Rey.Padberg@karina.biz'\n    }\n  ];","import React, { Component } from 'react';\n\n\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super (props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError: true})\n    }\n\n    render() {\n        if (this.state.hasError){\n            return <h1>Oooooops. that is not good</h1>\n        }\n        return this.props.children\n    }\n}\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport Scroll from './Scroll';\nimport {Robots} from './Robots';\nimport './App.css';\nimport ErrorBoundry from './ErrorBoundry';\n\n\n\nclass App extends Component {\n    constructor () {\n        super ()\n        this.state = {\n            Robots: Robots,\n            searchfield: ''\n        }\n    }\n\n    // componentDidMount() {\n    //     fetch('https://jsonplaceholder.typicode.com/users')\n    //     .then(response => response.json())\n    //     .then(users => this.setState({Robots: users}));\n    // }\n\n    onSearchChange = (event) => {\n            this.setState({searchfield: event.target.value})\n    }\n\n\n    render () {\n        const filteredRobots = this.state.Robots.filter(Robots => {\n        return Robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n    })\n        return (\n            <div className = 'tc'>\n                <h1 className = 'f1'>Robofriends</h1>\n                <SearchBox SearchChange = {this.onSearchChange}/>\n                <Scroll>\n                    <ErrorBoundry>\n                        <CardList Robots = {filteredRobots}  /> \n                    </ErrorBoundry>\n                </Scroll>\n            </div>\n\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}